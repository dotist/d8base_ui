<?php

/**
 * @file
 * Functions to support theming in the base_ui theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function base_ui_preprocess_html(array &$variables) {
  $t=1;
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function base_ui_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function base_ui_preprocess_page(array &$variables) {

}


/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function base_ui_preprocess_block(array &$variables) {

}

/**
 * Implements hook_preprocess_node().
 */
function base_ui_preprocess_node(array &$variables) {
  $node = $variables['elements']['#node'];
  $type = $node->getType();
  $variables['attributes']['class'][] = 'content';
  $variables['attributes']['class'][] = 'content-type-' . $type;
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_preprocess_form().
 */
function base_ui_preprocess_views_view(array &$variables) {
  $t=1;
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_form().
 */
function base_ui_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function base_ui_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\Core\Link;
function base_ui_preprocess_field(array &$variables, $hook) {
  if (isset($variables['entity_type']) && $variables['entity_type'] == 'paragraph') {
    $bundle = $variables['element']['#object']->bundle();
    if ($bundle == 'image') {
      if ($variables['element']['#field_name'] == 'field_image') {


      }
    }
  }
  switch($variables['element']['#field_name']) {
    // Apply featherlight-slideshow attributes to node-bundled image field elements,
    // so that display-image & paragraph image fields are one featherlight gallery.
    case 'field_image':
      $field_name = $variables['element']['#field_name'];
      if (isset($variables['entity_type']) && $variables['entity_type'] == 'paragraph') {
        $bundle = $variables['element']['#object']->bundle();
        if ($bundle == 'image') {
          // Create link to image in large image-style.
          // @TODO: transition to responsive image style.
          $image = $variables['element'][0];
          $uri = $variables['element']['#object']->get($field_name)->entity->getFileUri();
          $style_url = ImageStyle::load('max_1300x1300')->buildUrl($uri);
          $url = Url::fromUri($style_url);
          $link_options = [
            'attributes' => [
              'data-featherlight' => 'image',
              'featherlight-item' => '',
            ],
          ];
          $url->setOptions($link_options);
          // Create link to image-style on the image element & replace the standard render element.
          $link = Link::fromTextAndUrl($image, $url);
          $variables['items'][0]['content'] = $link;
          // Add caption as attribute.
            // @todo - how to add caption as field attribute beforehand?
        }
      }
      break;
    case 'field_image_main':
      $field_name = $variables['element']['#field_name'];
      if (isset($variables['element']['#object'])) {
        if ($variables['element']['#object']->bundle() == 'exhibition') {
          // @Edit - copied from above - create a Class.
          $image = $variables['element'][0];
          $uri = $variables['element']['#object']->get($field_name)->entity->getFileUri();
          $style_url = ImageStyle::load('max_1300x1300')->buildUrl($uri);
          $url = Url::fromUri($style_url);
          $link_options = [
            'attributes' => [
              'data-featherlight' => 'image',
              'featherlight-item' => '',
            ],
          ];
          $url->setOptions($link_options);
          // Create link to image-style on the image element & replace the standard render element.
          $link = Link::fromTextAndUrl($image, $url);
          $variables['items'][0]['content'] = $link;
        }

      }

      break;
    // Set Featherlight gallery (wrapper) attributes.
    case 'field_images':
      // $variables['attributes']['data-featherlight-gallery'] = '';
      // $variables['attributes']['data-featherlight-filter'] = 'a';
      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function base_ui_preprocess_paragraph(array &$variables) {
  if (isset($variables['paragraph'])) {
    $paragraph = $variables['paragraph'];
    // Add bundle type as attribute.
    $bundle = $paragraph->bundle();
    $variables['attributes']['paragraph-type'] = $bundle;
    $variables['attributes']['view-mode'] = $variables['view_mode'];
  }
  // switch ($variables['element']['#field_name']) {
  //   case 'field_image':

  //     break;
  // }
}

/**
 * Implements hook_preprocess_details().
 */
function base_ui_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function base_ui_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function base_ui_preprocess_page_title(array &$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $array = explode('/', $path);
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Modify page title on node edit pages.
    if (
      (isset($array[1]) && isset($array[2]) && isset($array[3]))
    &&
      ($array[1] == 'node' && is_numeric((int) $array[2]) && $array[3] == 'edit')
    ) {
      $title = $variables['title'];
      $bundle_label = \Drupal::entityTypeManager()
        ->getStorage('node_type')
        ->load($node->bundle())
        ->label();
      $variables['title'] = 'Edit ' . $bundle_label;
    }
  }

}
